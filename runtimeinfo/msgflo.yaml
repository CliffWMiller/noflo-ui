runtimetypes:
  msgflo:
    shortname: MsgFlo Message Queuing
    icon: cubes
    description: 'Message queue orchestration'
    helpurl: 'https://msgflo.org/docs/usage/'

componenttemplates:
  python: |
    #!/usr/bin/env python
    import sys, os, json, logging
    sys.path.append(os.path.abspath("."))
    import gevent
    import msgflo

    class Repeat(msgflo.Participant):
      def __init__(self, role):
        d = {
          'component': 'Repeat',
          'label': 'Repeat input data without change',
        }
        msgflo.Participant.__init__(self, d, role)

      def process(self, inport, msg):
        self.send('out', msg.data)
        self.ack(msg)


    def main():
      waiter = gevent.event.AsyncResult()
      role = sys.argv[1] if len(sys.argv) > 1 else 'repeat'
      repeater = Repeat(role)
      engine = msgflo.run(repeater, done_cb=waiter.set)

      print "Repeat running on %s" % (engine.broker_url)
      sys.stdout.flush()
      waiter.wait()
      print "Shutdown"
      sys.stdout.flush()

    if __name__ == '__main__':
      logging.basicConfig()
      main()
  coffeescript: |
    # To work in msgflo-nodejs source tree
    try
      msgflo = require 'msgflo-nodejs'
    catch e
      msgflo = require '..'

    RepeatParticipant = (client, role) ->

      definition =
        component: 'Repeat'
        icon: 'file-word-o'
        label: 'Repeats in data without changes'
        inports: [
          id: 'in'
          type: 'any'
        ]
        outports: [
          id: 'out'
          type: 'any'
        ]
      process = (inport, indata, callback) ->
        return callback 'out', null, indata
      return new msgflo.participant.Participant client, definition, process, role

    module.exports = RepeatParticipant
  javascript: |
    try {
      var msgflo = require('msgflo-nodejs');
    } catch (error) {
      var e = error;
      var msgflo = require('..');
    }

    var RepeatParticipant = function(client, role) {
      var definition = {
        component: 'Repeat',
        icon: 'file-word-o',
        label: 'Repeats in data without changes',
        inports: [
          {
            id: 'in',
            type: 'any'
          }
        ],
        outports: [
          {
            id: 'out',
            type: 'any'
          }
        ]
      };
      var process = function(inport, indata, callback) {
        return callback('out', null, indata);
      };
      return new msgflo.participant.Participant(client, definition, process, role);
    };

    module.exports = RepeatParticipant;
  yaml: |
    # Declare MsgFlo participant on behalf of code which does not send discovery message by itself
    component: DoorLock
    label: Open the door
    icon: lightbulb-o
    inports:
      open:
        queue: /bitraf/door/#ROLE/open
        type: object
    outports: {}

examples: {}
