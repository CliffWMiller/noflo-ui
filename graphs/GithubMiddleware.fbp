INPORT=Dispatch.IN:IN
OUTPORT=Dispatch.PASS:PASS
OUTPORT=NewActions.OUT:NEW

'github:open,github:gist,github:fetch' -> ROUTES Dispatch(ui/DispatchAction)

# New actions generated by this middleware
'application:hash' -> ACTION ApplicationRedirectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'project:save:graph' -> ACTION SaveGraphAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'project:save:component' -> ACTION SaveComponentAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'project:save:project' -> ACTION SaveProjectAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'github:projects' -> ACTION RemoteProjectsAction(ui/SetAction) OUT -> IN NewActions(core/Merge)
'github:error' -> ACTION ErrorAction(ui/SetAction) OUT -> IN NewActions(core/Merge)

# Downloading a GitHub project
Dispatch HANDLE[0] -> IN Output(core/Output)

# Downloading a gist example
# First check if we already have a local version of the gist
Dispatch HANDLE[1] -> IN CheckGist(ui/CheckGistExists)
# If it already exists, redirect
CheckGist EXISTING -> IN ApplicationRedirectAction
# If not, download as new project
CheckGist NEW -> IN GetGist(ui/GistToProject)
GetGist GRAPH -> IN LoadGraph(graph/LoadJson) OUT -> IN SaveGraphAction
GetGist COMPONENT -> IN SaveComponentAction
GetGist PROJECT -> IN SaveProjectAction
GetGist ERROR -> IN ErrorAction

# Fetching list of remote projects
'user' -> KEYS GetRemoteUserState(ui/GetActionValues)
Dispatch HANDLE[2] -> IN GetRemoteUserState VALUES[0] -> USER GetRemoteProjects(ui/GetRemoteProjects)
GetRemoteProjects PROJECTS -> IN RemoteProjectsAction
GetRemoteProjects ERROR -> IN ErrorAction
